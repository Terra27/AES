public class AES {

	private static final int sBox[][] = { { 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76 },
										  { 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0 },
										  { 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15 },
										  { 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75 },
										  { 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84 },
										  { 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf },
										  { 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8 },
										  { 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2 },
										  { 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73 },
										  { 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb },
										  { 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79 },
										  { 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08 },
										  { 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a },
										  { 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e },
										  { 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf },
										  { 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 } };
	
	private static final int inverseSBox[][] = { { 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb },
												 { 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb },
												 { 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e },
												 { 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25 },
												 { 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92 },
												 { 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84 },
												 { 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06 },
												 { 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b },
												 { 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73 },
												 { 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e },
												 { 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b },
												 { 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4 },
												 { 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f },
												 { 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef },
												 { 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61 },
												 { 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d } };
	
	public static void main(String[] args) {
		
		int x = 0x00;
		System.out.println(substituteByte( x ));
		
		int[][] t = { { 1, 2, 3, 4 },
					  { 5, 6, 7, 8 },
					  { 9, 10, 11, 12 },
					  { 13, 14, 15, 16 },
					};
		
		int[][] o = shiftRows( t );
		for ( int i = 0; i < 4; i++ ) {
			for ( int j = 0; j < 4; j++ ) {
				System.out.print(o[i][j] + " ");	
			}
			System.out.println("");
		}
		
		long w = 2139957551L;
		System.out.printf("Round key: %x", g( w, 9));
		
		int[][] previousKey = { { 0xea, 0x2d, 0x82, 0x7f },
								{ 0xd2, 0x37, 0x34, 0x8d },
								{ 0x73, 0xbf, 0x5c, 0x29 },
								{ 0x21, 0x09, 0xa8, 0x2f } };
		
		int[][] roundKey = generateRoundKey( previousKey, 9 );
		
		for ( int i = 0; i < 4; i++ ) {
			for ( int j = 0; j < 4; j++ ) {
				System.out.printf("%x", roundKey[j][i]);	
			}
			System.out.print(" ");
		}
	}

	private static int substituteByte( int textByte ) {
		
		int y = ( textByte & 0b11110000 ) / ( 16 );
		int x = textByte & 0b00001111;
		return sBox[y][x];
	}
	
	private static int[][] shiftRows( int[][] text ) {
		
		int[][] out = new int[4][4];
		
		for ( int i = 0; i < 4; i++ ) {
			for ( int j = 0; j < 4; j++) {
				
				if ( j == 0 ) // first row
					out[j][i] = text[j][i];
				if ( j == 1 ) { // second row
					if ( i == 0 ) // 1 circular shift
						out[j][3] = text[j][i];
					else {
						out[j][i-1] = text[j][i];
					}
				}
				if ( j == 2 ) { // 3rd row
					if ( i == 0 )
						out[j][2] = text[j][i];
					else if ( i == 1 )
						out[j][3] = text[j][i];
					else {
						out[j][i-2] = text[j][i];
					}
				}
				if ( j == 3 ) { // 4th row
					if ( i == 3 )
						out[j][0] = text[j][i];
					else {
						out[j][i+1] = text[j][i];
					}
				}
			}
		}
			
		return out;
	}
	
	public static int[][] generateRoundKey( int[][] previousKey, int round ) {
		if ( round == 0 )
			return previousKey;
		else {
			
			long w0 = (long)(( (long)( previousKey[0][0] * ( (long)Math.pow(2, 24)) ) + (long)( previousKey[1][0] * ( (long)Math.pow(2, 16)) ) + (long)( previousKey[2][0] * ( (long)Math.pow(2, 8)) ) + (long)( previousKey[3][0] * ( (long)Math.pow(2, 0)) ) ));
			long w1 = (long)(( (long)( previousKey[0][1] * ( (long)Math.pow(2, 24)) ) + (long)( previousKey[1][1] * ( (long)Math.pow(2, 16)) ) + (long)( previousKey[2][1] * ( (long)Math.pow(2, 8)) ) + (long)( previousKey[3][1] * ( (long)Math.pow(2, 0)) ) ));
			long w2 = (long)(( (long)( previousKey[0][2] * ( (long)Math.pow(2, 24)) ) + (long)( previousKey[1][2] * ( (long)Math.pow(2, 16)) ) + (long)( previousKey[2][2] * ( (long)Math.pow(2, 8)) ) + (long)( previousKey[3][2] * ( (long)Math.pow(2, 0)) ) ));
			long w3 = (long)(( (long)( previousKey[0][3] * ( (long)Math.pow(2, 24)) ) + (long)( previousKey[1][3] * ( (long)Math.pow(2, 16)) ) + (long)( previousKey[2][3] * ( (long)Math.pow(2, 8)) ) + (long)( previousKey[3][3] * ( (long)Math.pow(2, 0)) ) ));
			
			
			long w0_ = w0 ^ g( w3, round );
			long w1_ = w1 ^ w0_;
			long w2_ = w2 ^ w1_;
			long w3_ = w3 ^ w2_;
			
			int[][]roundKey = new int[4][4];
			roundKey[0][0] = (int)(( w0_ & 0b11111111000000000000000000000000L ) / (long)Math.pow(2, 24));
			roundKey[1][0] = (int)(( w0_ & 0b00000000111111110000000000000000L ) / (long)Math.pow(2, 16));
			roundKey[2][0] = (int)(( w0_ & 0b00000000000000001111111100000000L ) / (long)Math.pow(2, 8));
			roundKey[3][0] = (int)(( w0_ & 0b00000000000000000000000011111111L ) / (long)Math.pow(2, 0));
			
			roundKey[0][1] = (int)(( w1_ & 0b11111111000000000000000000000000L ) / (long)Math.pow(2, 24));
			roundKey[1][1] = (int)(( w1_ & 0b00000000111111110000000000000000L ) / (long)Math.pow(2, 16));
			roundKey[2][1] = (int)(( w1_ & 0b00000000000000001111111100000000L ) / (long)Math.pow(2, 8));
			roundKey[3][1] = (int)(( w1_ & 0b00000000000000000000000011111111L ) / (long)Math.pow(2, 0));
			
			roundKey[0][2] = (int)(( w2_ & 0b11111111000000000000000000000000L ) / (long)Math.pow(2, 24));
			roundKey[1][2] = (int)(( w2_ & 0b00000000111111110000000000000000L ) / (long)Math.pow(2, 16));
			roundKey[2][2] = (int)(( w2_ & 0b00000000000000001111111100000000L ) / (long)Math.pow(2, 8));
			roundKey[3][2] = (int)(( w2_ & 0b00000000000000000000000011111111L ) / (long)Math.pow(2, 0));
			
			roundKey[0][3] = (int)(( w3_ & 0b11111111000000000000000000000000L ) / (long)Math.pow(2, 24));
			roundKey[1][3] = (int)(( w3_ & 0b00000000111111110000000000000000L ) / (long)Math.pow(2, 16));
			roundKey[2][3] = (int)(( w3_ & 0b00000000000000001111111100000000L ) / (long)Math.pow(2, 8));
			roundKey[3][3] = (int)(( w3_ & 0b00000000000000000000000011111111L ) / (long)Math.pow(2, 0));
			
			return roundKey;
		}
	}
	
	public static long g( long w, int round ) {
		int b0 = (int)(( w & 0b11111111000000000000000000000000 ) / ( (long)Math.pow(2, 24)));
		int b1 = (int)(( w & 0b00000000111111110000000000000000 ) / ( (long)Math.pow(2, 16)));
		int b2 = (int)(( w & 0b00000000000000001111111100000000 ) / ( (long)Math.pow(2, 8)));
		int b3 = (int)(( w & 0b00000000000000000000000011111111 ) / ( (long)Math.pow(2, 0)));
		
		int b0_ = substituteByte( b0 );
		int b1_ = substituteByte( b1 );
		int b2_ = substituteByte( b2 );
		int b3_ = substituteByte( b3 );
		
		long b = (long)( b1_ * (long)Math.pow(2, 24) ) + (long)( b2_ * (long)Math.pow(2, 16) ) + (long)( b3_ * (long)Math.pow(2, 8) ) + (long)( b0_ * (long)Math.pow(2, 0) );
		
		long out;
		if ( round <= 8 ) {
			out = b ^ ( (long)round * (long)(Math.pow(2, 6) ) );
		}
		else if ( round == 9 ) {
			long r = 0b00011011L;
			out = b ^ ( r * (long)(Math.pow(2, 24) ) );
		}
		else {
			long r = 0b00110110L;
			out = b ^ ( round * (long)(Math.pow(2, 24) ) );
		}
		
		return out;
	}
}
